name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: install leveldb and gflags
      run: |
           sudo apt-get install libleveldb-dev
           sudo apt-get install libgflags-dev
           sudo apt install libprotoc-dev
           sudo apt install protobuf-compiler
           protoc --version

      
    - name: install thridparty
      run: |
           #wget https://github.com/protocolbuffers/protobuf/releases/download/v3.17.3/protobuf-cpp-3.17.3.tar.gz
           #tar xvf protobuf-cpp-3.17.3.tar.gz
           #cd protobuf-3.17.3
           #./autogen.sh
           #./configure
           #make -j $(nproc)
           #sudo make install
           sudo ldconfig
           
    - name: config brpc
      run: |
           #THIRD_DIR=thirdparty-test
           #export PATH=`pwd`/${THIRD_DIR}/protobuf/bin:$PATH
           #export LD_LIBRARY_PATH=`pwd`/${THIRD_DIR}/protobuf/lib:$LD_LIBRARY_PATH
           #sh config_brpc.sh --headers="${THIRD_DIR}/gflags/include ${THIRD_DIR}/protobuf/include" --libs="${THIRD_DIR}/gflags/lib/ ${THIRD_DIR}/protobuf/lib"
           #sh config_brpc.sh --headers="/usr/include/ /usr/local/include/ " --libs="/usr/lib/ /usr/lib64/ /usr/local/lib/ /usr/local/lib4/ "
           #make -j $(nproc)
           echo $PATH
           
           
           

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
